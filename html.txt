titile : 제목.

ul : unorderd list 번호없는 리스트
ol : orderd list 번호있는 리스트
	li : list 위의 자식 태그

p : paragraph
style로 마진(여백) 등 여러 스타일 가능
<p style="margin-bottom:85px;">

br : break 줄바꿈

h1~6 : 헤드라인 (글씨크게)

strong : 굵게

a : anchor 하이퍼링크 태그 href="http://www.~" href:하이퍼링크 레퍼런스 a태그는 anchor의 약자
target 속성으로 새 탭에서 열기 가능(_black) title은 마우스 올렸을때 글자

u : underline

css에서 태그 안에 직접 style속성 부여해서 css하는 것이 inline style tag라고 함

class 여러개 주고 싶을때 그냥 뒤에 나열해서 쓰면 됨. 띄어쓰기로 구분
ex) <p class="saw active select"> 하지만 클래스를 여러개 줘서 css적용할 경우 밑에 줄에 있는 것으로 덮어씌우기 때문에 좋지 않음.
그래서 id를 씀. id가 class보다 상위이기 때문에 class보다 앞에 나와도 id에 적용된 css를 따름. tag<class<id

block이나 inline level element들은 css를 통해 바꿀 수 있다.
display: block or inline;을 통해서.

<span> : inline level <div> : block level

can i use 사이트는 현재 사용하는 css기술이 해당 브라우저에서 동작 하는지 알아볼 때 좋다.

css만 ':'표시 씀. js는 '='으로 씀

<link rel="stylesheet" href="style.css">는 미리 만든 css 파일을 가져올때

js에서 document.querySelector('#id/.class/tag')는 스크립트에서 태그를 고르는 것이고 뒤에 .style 하면 css를 사용한다는 것이고
뒤에 . 찍고 css에서 쓸 때 처럼 그 태그나 클래스, id에 적용될 backgroundColor 같은 것을 적을 수 있다.
ex) document.querySelector('#show_want').style.backgroundColor="white";

script 태그에서 document.write("1<br>"); 이렇게 쓰면 그냥 html 문서에 큰 따음표 안에 문자를 그대로 적는 거랑 같다.
그래서 브라우저로 열면 1 다음에 한줄 띄어쓴다.

js에서 비교연산은 === 이렇게 =을 3개 쓴다.

리팩토링 작업이란 코드를 다듬는 과정을 말한다.

태그 안에 속성으로 onclick=""안에 js 들어가는데 여기서 this를 하면 이 태그를 선택한다는 의미.
그래서 this.value = ~ 이런식으로 가능

querySelector의 특징은 전부 다 가져오는 것이 아니라 처음 하나만 가져옴.

argument는 보내는 쪽에서 볼때, parameter는 받는 쪽에서 볼 때

script 태그 내부에서(js에서는) this는 전역객체를 의미한다. 웹 브라우저에서는 윈도우다.

js에서 객체생성 ex.html파일 보면서 하면 편함
function wr(text){
	document.write(text+"<br>");
}
var te = {		//기본적인 객체생성. 생성 시 절대 '='으로 하지 마라. 꼭 ":"으로 해라
	"programmer" : "jmLee",
	"designer" : "jwKim"
}
wr("programmer : "+te.programmer);		//객체 데이터 불러오기
wr("designer : "+te.designer);
te.writer = "hwPark";				//객체에 데이터 삽입
wr("writer : "+te.writer);
te["data scientist"] = "mj Lee";		//객체에 띄어쓰기 포함한 이름의 데이터 삽입
wr("data scientist : "+te["data scientist"]);
for(var key in te){				te라는 객체 안의 key 값을 하나하나 가져옴
	wr(key+" : "+te[key]);
}
te.showAll = function(){		//te 객체 안에 메소드 삽입하는 법
	블라블라
}

객체에 소속된 함수를 메소드라고 부른다. 객체에 소속된 변수를 property라고 부른다.

jquery 사이트 들어가서 직접 다운로드 한 다음에 자신의 프로젝트 폴더에 넣어도 되는데 cdn을 통해서 그냥 간편히 해결할 수 있다.
CDN : content delivery network 즉 라이브러리를 직접 다운로드 하지 않고 script src=""를 통해서 가져갈 수 있는 것.
jquery 라이브러리를 사용하면 js를 편하게 코딩할 수 있다.
라이브러리 없이 js로만 할 때는 document.querySelectorAll('a') 한 다음에 loop 돌려서 하나씩 설정해 줘야 했지만
jquery를 이용하면 $('a').css("backgroundColor", "white"); 이런 식으로 한 줄에 가능.

ctrl + / 하면 많은 에디터들이 주석 처리를 해줌.

library : 부품같은 개념
framework : 기반같은 개념.
api : application programming interface의 약자. js에서 alert()도 api라고 할 수 있음. 경고창의 모양이나 색이나 우리가 코딩
한 것이 아니기 때문.

검색할 만한 것들
document : 어떤 태그에 자식 태그를 추가하고 싶을 때 검색. (앞으로 검색 단어는 빼고 쓰겠음)
dom(document object model) : document 객체를 통해서도 찾을 수 없을 때
window : 현재 열려있는 웹 페이지 주소, 새 창을 열기, 웹 브라우저의 화면 크기를 js를 통해 알아야 할 때.
ajax : 웹 페이지를 리로드 하지 않고 정보를 변경하고 싶다면
cookie : 리로드 되어도 현재 상태를 유지하고 싶다면. 사용자를 위한 개인화된 서비스 제작 가능
offline web application : 인터넷이 끊겨도 동작하는 웹 페이지를 만들고 싶다면
webRTC : 화상통신 웹 앱을 만들고 싶다?
speech : 사용자의 음성을 인식하고 음성으로 정보를 전달하고 싶다면 speech로 시작하는 api 검색
webGL : 3차원 그래픽으로 게임과 같은 것을 만들고 싶다.
webVR : 가상현실에 관심이 많으면.

single-page application : 하나의 페이지로 여러 정보를 표현할 수 있는 application이다.
